{"remainingRequest":"/home/cachac/vueProjects/nextlevel/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/cachac/vueProjects/nextlevel/src/views/EventList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/cachac/vueProjects/nextlevel/src/views/EventList.vue","mtime":1540409343000},{"path":"/home/cachac/vueProjects/nextlevel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cachac/vueProjects/nextlevel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/cachac/vueProjects/nextlevel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cachac/vueProjects/nextlevel/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventCard from '@/components/EventCard.vue'\nimport { mapState } from 'vuex'\n\nexport default {\n  components: {\n    EventCard\n  },\n  created() {\n    this.perPage = 3 // Setting perPage here and not in data means it won't be reactive.\n    // We don't need it to be reactive, and this way our component has access to it.\n\n    this.$store.dispatch('event/fetchEvents', {\n      perPage: this.perPage,\n      page: this.page\n    })\n  },\n  computed: {\n    page() {\n      return parseInt(this.$route.query.page) || 1\n    },\n    hasNextPage() {\n      return this.event.eventsTotal > this.page * this.perPage\n    },\n    ...mapState(['event', 'user'])\n  }\n}\n",{"version":3,"sources":["EventList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EventList.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <h1>Events for {{ user.user.name }}</h1>\n    <EventCard v-for=\"event in event.events\" :key=\"event.id\" :event=\"event\"/>\n    <template v-if=\"page != 1\">\n      <router-link :to=\"{ name: 'event-list', query: { page: page - 1 } }\" rel=\"prev\">\n      Prev Page</router-link>\n      <template v-if=\"hasNextPage\"> | </template>\n    </template>\n    <router-link v-if=\"hasNextPage\" :to=\"{ name: 'event-list', query: { page: page + 1 } }\" rel=\"next\">\n      Next Page</router-link>\n  </div>\n</template>\n\n<script>\nimport EventCard from '@/components/EventCard.vue'\nimport { mapState } from 'vuex'\n\nexport default {\n  components: {\n    EventCard\n  },\n  created() {\n    this.perPage = 3 // Setting perPage here and not in data means it won't be reactive.\n    // We don't need it to be reactive, and this way our component has access to it.\n\n    this.$store.dispatch('event/fetchEvents', {\n      perPage: this.perPage,\n      page: this.page\n    })\n  },\n  computed: {\n    page() {\n      return parseInt(this.$route.query.page) || 1\n    },\n    hasNextPage() {\n      return this.event.eventsTotal > this.page * this.perPage\n    },\n    ...mapState(['event', 'user'])\n  }\n}\n</script>\n"]}]}